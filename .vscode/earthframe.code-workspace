{
  "folders": [
    { "name": "root", "path": ".." },
    {
      "name": "Backend",
      "path": "../backend"
    },
    {
      "name": "Frontend",
      "path": "../frontend"
    }
  ],
  "settings": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint", // Use ESLint as the formatter
    "eslint.enable": true,
    "eslint.validate": [
      "javascript",
      "javascriptreact",
      "typescript",
      "typescriptreact"
    ],
    "eslint.nodePath": "${workspaceFolder}/frontend/node_modules",
    "eslint.workingDirectories": [
      { "directory": "frontend", "changeProcessCwd": true }
    ],
    "editor.codeActionsOnSave": { "source.fixAll.eslint": "always" },
    "debug.javascript.unmapMissingSources": true,
    "npm.packageManager": "pnpm"
  },
  "tasks": {
    "version": "2.0.0",
    "tasks": [
      {
        "label": "frontend: dev (vite)",
        "type": "shell",
        "command": "pnpm",
        "args": ["dev"],
        "options": { "cwd": "${workspaceFolder}/frontend" },
        "isBackground": true,
        "problemMatcher": {
          "owner": "vite",
          "pattern": {
            "regexp": "^([^:\\n]+):(\\d+):(\\d+):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "message": 4
          },
          "background": {
            "activeOnStart": true,
            "beginsPattern": "VITE\\s+v\\d+\\.\\d+\\.\\d+",
            "endsPattern": "Local:\\s+https?://localhost:\\d+/?"
          }
        },
        "presentation": {
          "reveal": "always",
          "panel": "dedicated",
          "clear": false
        }
      }
    ]
  },

  "launch": {
    "version": "0.2.0",
    "configurations": [
      {
        "name": "frontend: Vite (Chrome)",
        "type": "chrome", // you can also use "pwa-chrome" if preferred
        "request": "launch",
        "url": "http://localhost:5173",
        "webRoot": "${workspaceFolder}/frontend",
        "preLaunchTask": "frontend: dev (vite)",
        "skipFiles": [
          "<node_internals>/**",
          "**/node_modules/react-dom/**",
          "**/node_modules/scheduler/**",
          "**/.vite/deps/react-dom*",
          "**/.vite/deps/scheduler*",
          "**/react-refresh/**",
          "**/node_modules/**",
          "**/utils.ts" // Add this line to skip utils.ts
        ]
      },
      {
        "name": "frontend: Vite (Firefox)",
        "type": "firefox", // requires the "Debugger for Firefox" extension
        "request": "launch",
        "url": "http://localhost:5173",
        "webRoot": "${workspaceFolder}/frontend",
        "preLaunchTask": "frontend: dev (vite)",
        "pathMappings": [
          {
            "url": "http://localhost:5173/",
            "path": "${workspaceFolder}/frontend"
          }
        ],
        "skipFiles": [
          "**/node_modules/react-dom/**",
          "**/node_modules/scheduler/**",
          "**/.vite/deps/react-dom*",
          "**/.vite/deps/scheduler*",
          "**/react-refresh/**",
          "**/node_modules/**",
          "**/utils.ts" // Add this line to skip utils.ts
        ],
        "reAttach": true
      }
    ],
    "compounds": [
      {
        "name": "frontend: Chrome + Firefox",
        "configurations": [
          "frontend: Vite (Chrome)",
          "frontend: Vite (Firefox)"
        ]
      }
    ]
  },
  "React Component with Sections": {
    "prefix": "rcomp",
    "body": [
      "// -------------------- Imports --------------------",
      "import React, { useState, useEffect } from \"react\";",
      "import { useLocation, useNavigate, useParams } from \"react-router-dom\";",
      "import { Button } from \"@/components/ui/button\";",
      "",
      "// -------------------- Types & Interfaces --------------------",
      "interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props {",
      "  id?: string;",
      "}",
      "",
      "// -------------------- Pure Helpers --------------------",
      "const formatLabel = (label: string) => label.toUpperCase();",
      "",
      "// -------------------- Component --------------------",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}: React.FC<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props> = ({ id }) => {",
      "  // -------------------- Router --------------------",
      "  const location = useLocation();",
      "  const navigate = useNavigate();",
      "  const params = useParams();",
      "",
      "  // -------------------- Local State --------------------",
      "  const [count, setCount] = useState(0);",
      "",
      "  // -------------------- Derived Data --------------------",
      "  const formattedId = id ? formatLabel(id) : \"N/A\";",
      "  const isActive = count > 0;",
      "",
      "  // -------------------- Effects --------------------",
      "  useEffect(() => {",
      "    console.log(\"Location changed:\", location.pathname);",
      "  }, [location.pathname]);",
      "",
      "  // -------------------- Handlers --------------------",
      "  const handleIncrement = () => setCount((prev) => prev + 1);",
      "  const handleNavigate = () => navigate(\"/dashboard\");",
      "",
      "  // -------------------- Render --------------------",
      "  return (",
      "    <div>",
      "      <h1>${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}</h1>",
      "      <p>ID: {formattedId}</p>",
      "      <p>Count: {count}</p>",
      "      {isActive && <p>Status: Active</p>}",
      "",
      "      <Button onClick={handleIncrement}>Increment</Button>",
      "      <Button onClick={handleNavigate}>Go to Dashboard</Button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};"
    ],
    "description": "React component with full section comments (Router, State, Derived, Effects, Handlers, Render)"
  }
}
